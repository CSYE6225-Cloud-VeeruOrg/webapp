name: AMI Build

on:
  push:
    branches:
        - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: AMI Build
    
    services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: ${{ secrets.PGDATABASE }}
            POSTGRES_USER: ${{ secrets.PGUSER }}
            POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
            POSTGRES_PORT: ${{ secrets.PGPORT }}
            POSTGRES_HOST: ${{ secrets.PGHOST }}
          ports:
            - 5432:5432
          options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm install

    - name: "Setup .env file"
      run: |
        touch .env
        echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
        echo PGUSER=${{ secrets.PGUSER }} >> .env
        echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
        echo PGPORT=${{ secrets.PGPORT }} >> .env
        echo PGHOST=${{ secrets.PGHOST }} >> .env

    - name: Run tests
      run: npm run test:integration
    
    - name: Remove node_modules and .git files
      run: |
        rm -rf node_modules
        rm -rf .git
        rm .env
        
    - name: Zip Repository
      run: |
        zip -r webapp.zip .
        mkdir -p zip
        mv webapp.zip zip/

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"

    - name: Configure AWS Dev Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run Packer init
      id: init
      run: |
        packer init packer/.

    - name: Build AMI
      run: |
        packer build -var "artifact=zip/webapp.zip" packer/.

    - name: Fetech Latest AMI ID
      run: |
        AMI_ID=$(jq -r '.builds[-1].artifact_id' ./webapp/packer/manifest.json | cut -d ":" -f2)
        echo $AMI_ID

    - name: Configure AWS Demo Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEMO }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create Launch Template Version and Configure Auto Scaling Group
      run: |
        aws ec2 create-launch-template-version --launch-template-name veeru-launch-template-3045c12 --source-version 1 --region ${{ secrets.AWS_REGION }} --image-id $AMI_ID
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name veeru-asg-547a25d --launch-template LaunchTemplateName=veeru-launch-template-3045c12,Version='$Latest' --region ${{ secrets.AWS_REGION }}

    - name: Create Launch Template Version and Configure Auto Scaling Group
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name veeru-asg-547a25d 